package 暴力枚举;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;

public class 妖梦拼火柴 {
	
	//记录每个长度的火柴的根数
	private static int[] matchesLength = new int[5001];

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
		StreamTokenizer st = new StreamTokenizer(bf);
		PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
		
		st.nextToken();
		int n = (int)st.nval;
		//记录每根火柴
		int[] arr = new int[n];
		
		for (int i = 0; i < n; i++) {
			st.nextToken();
			int length = (int)st.nval;
			arr[i] = length;
			matchesLength[length]++;
		}
		
		int count = 0;
		//两根短火柴相等时
		for (int i = 0; i < arr.length; i++) {
			for (int j = 0; j < arr.length; j++) {
				if (i == j) {
					continue;
				}
				if (matchesLength[arr[i] + arr[j]] >= 2) {
					count++;
				}
			}
		}
		//两个短火柴不等时
		for (int i = 0; i < matchesLength.length; i++) {
			for (int j = i+1; j < matchesLength.length; j++) {
				if (matchesLength[i] >=1 && matchesLength[j] >= 1 && matchesLength[i+j] >= 1 ) {
					count++;
				}
			}
		}
		pw.print(count);
		pw.close();
		
	}

}
