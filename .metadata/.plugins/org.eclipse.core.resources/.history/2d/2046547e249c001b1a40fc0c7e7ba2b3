package 搜索;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;

public class 八皇后 {
	
	private static int n;
	private static int[][] matrix;

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StreamTokenizer st = new StreamTokenizer(br);
		PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
		
		st.nextToken();
		n = (int)st.nval;
		matrix  = new int[n+1][n+1];
		
		for (int i = 1; i <=n; i++) {
			for (int j = 1; j <= n; j++) {
				st.nextToken();
				matrix[i][j] = (int)st.nval;
			}
		}
		pw.print(check(1, 1));
		pw.close();
	}
	
	private static void dfs() {
		
	}
	
	private static boolean check(int r, int c) {
		for (int i = 1; i <= n; i++) {
			if (matrix[r][i] != 0) {
				return false;
			}
		}
		for (int i = 1; i <= n; i++) {
			if (matrix[i][c] != 0) {
				return false;
			}
		}
		for (int i = 1; i <= n-1; i++) {
			if (r - i >= 1 && c - i >= 1) {
				if (matrix[r-i][c-i] != 0) {
					return false;
				}
			}else if (r + i <= n && c + i <= n) {
				if (matrix[r+i][c+i] != 0) {
					return false;
				}
			}else if (r - i >= 1 && c + i <= n) {
				if (matrix[r-i][c+i] != 0) {
					return false;
				}
			}else if (r + i <= n && c - i >=1) {
				if (matrix[r+i][c-i] != 0) {
					return false;
				}
			}
		}
		return true;
	}

}
