package 二分;

import java.io.*;
import java.util.Arrays;


public class 砍树 {
	
	private static int n;
	private static int m;
	private static int[] arr;

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StreamTokenizer st = new StreamTokenizer(br);
		PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
		
		st.nextToken();
		n = (int)st.nval;
		st.nextToken();
		m = (int)st.nval;
		arr = new int[n];
		for (int i = 0; i < n; i++) {
			st.nextToken();
			arr[i] = (int)st.nval;
		}
		
		Arrays.sort(arr);
		
		pw.print(binarySearch(arr, 0, n - 1));
		pw.close();
	}

	private static int binarySearch(int[] arr, int fromIndex, int toIndex) {
		int low = fromIndex, hight = toIndex;
		int sum = 0;
		while (sum != m && hight > low) {
			int mid = (low + hight) / 2;
			int midVal = (arr[low] + arr[hight]) / 2;
			for (int i = mid + 1; i < arr.length; i++) {
				sum += arr[i] - midVal;
			}
			if (sum == m) {
				return midVal;
			}else if (sum > m) {
				low = mid;	
			}else {
				hight = mid;
			}
			
		}
		return -1;
	}
}
