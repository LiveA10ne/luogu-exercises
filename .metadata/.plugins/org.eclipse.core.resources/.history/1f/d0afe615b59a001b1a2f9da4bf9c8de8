package 贪心;

import java.io.*;
import java.util.Arrays;

public class 查找 {
	
	private static int[] arr;
	private static int[] keyArr;

	public static void main(String[] args) throws IOException{
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StreamTokenizer st = new StreamTokenizer(br);
		PrintWriter pw = new PrintWriter(new BufferedWriter(new OutputStreamWriter(System.out)));
		
		st.nextToken();
		int n = (int)st.nval;
		st.nextToken();
		int m = (int)st.nval;
		arr = new int[n];
		for (int i = 0; i < arr.length; i++) {
			st.nextToken();
			arr[i] = (int)st.nval;
		}
		keyArr = new int[m+5];
		for (int i = 0; i < m; i++) {
			st.nextToken();
			keyArr[i] =(int)st.nval;
		}
		
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < m; i++) {
			int index = binarySearch(arr, keyArr[i]);
			if (index == 0) {
				sb.append(index +1).append(" ");
			}else if (index > 0) {
				for (int j = index - 1; j >= 0; j--) {
					if (arr[j] != keyArr[i]) {
						break;
					}
					if (arr[j] == keyArr[i]) {
						index = j;
					}
				}
				sb.append(index +1).append(" ");
			}else {
				sb.append(-1).append(" ");
			}
		}	
		pw.print(sb);
		pw.close();
	}
	
	private static int binarySearch(int[] arr, int key) {
		int low = 0;
        int high = arr.length - 1;

        while (low <= high) {
            int mid = (low + high) >>> 1;
            int midVal = arr[mid];

            if (midVal < key)
                low = mid + 1;
            else if (midVal > key)
                high = mid - 1;
            else
                return mid; // key found
        }
        return -(low + 1);  // key not found.
	}
}
